//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using App.Membership.Repositories.Abstract;
using NHibernate;
using App.Membership.Infrastructure.Messages;
using NHibernate.Criterion;

namespace App.Membership.Repositories.NHibernate
{

    public abstract class RepositoryBase<T, TId> : IRepository<T, TId>
    {

        ISession session;

        protected ISession Session
        {
            get
            {
                if (session == null)
                {
                    session = SessionFluentProvider.GetSession();
                }
                return session;
            }
        }

        public virtual ValueResponse<T> Add(T entity)
        {
            try
            {
                using (ITransaction trans = Session.BeginTransaction())
                {
                    var result = Session.Save(entity);
                    trans.Commit();
                    return new ValueResponse<T> {Value = (T)result };
                }
            }
            catch (Exception exc)
            {
                if (exc.InnerException != null &&
                    (exc.InnerException.Message.Contains("ORA-00001: unique constraint") ||
                     exc.InnerException.Message.Contains("Cannot insert duplicate key")))
                {
                    //throw new DuplicateNameException("Dublicate found", exc);
                    return new ValueResponse<T>
                    {
                        Errors = new List<Exception> { new DuplicateNameException("Dublicate found", exc) }
                    };
                }
                else
                {
                    //throw exc;
                    return new ValueResponse<T>
                    {
                        
                        Errors = new List<Exception> { exc }
                    };
                }
            }

        }

        public virtual ValueResponse<T> Update(T entity)
        {
            try
            {
                using (ITransaction trans = Session.BeginTransaction())
                {
                    Session.SaveOrUpdate(entity);
                    trans.Commit();
                    return new ValueResponse<T> {  Value = entity };
                }
            }
            catch (Exception exc)
            {
                if (exc.InnerException != null &&
                    (exc.InnerException.Message.Contains("ORA-00001: unique constraint") ||
                     exc.InnerException.Message.Contains("Cannot insert duplicate key")))
                {
                    //throw new DuplicateNameException("Dublicate found", exc);
                    return new ValueResponse<T>
                    {
                        
                        Errors = new List<Exception> { new DuplicateNameException("Dublicate found", exc) }
                    };
                }
                else
                {
                    //throw exc;
                    return new ValueResponse<T>
                    {
                        
                        Errors = new List<Exception> { exc }
                    };
                }
            }
        }

        public virtual ValueResponse<T> Delete(TId id)
        {
            try
            {
                using (ITransaction trans = Session.BeginTransaction())
                {
                    var resultFind = FindBy(id);
                    if (!resultFind.Success)
                    {
                        return resultFind;
                    }
                    if (resultFind.Value == null)
                    {
                        return new ValueResponse<T>
                        {
                            
                            Errors = new List<Exception> { new Exception("Object not found!") }
                        };
                    }
                    Session.Delete(resultFind.Value);
                    trans.Commit();
                    return new ValueResponse<T> {  Value = resultFind.Value };
                }

            }
            catch (Exception ex)
            {
                return new ValueResponse<T>
                {
                    
                    Errors = new List<Exception> { new Exception("Object not deleted", ex) }
                };
            }
        }

        public virtual ValueResponse<T> FindBy(TId id)
        {
            try
            {
                var resultFound = Session.Get<T>(id);
                var result = new ValueResponse<T> {  };
                if (resultFound != null)
                    result.Value = resultFound;
                return result;
            }
            catch (Exception ex)
            {
                return new ValueResponse<T> {  Errors = new List<Exception> { ex } };
            }

        }

        public ListResponse<T> FindAll(string propertyName, object propertyValue, bool ascending)
        {
            try
            {
                ICriteria criteria = Session.CreateCriteria(typeof(T));
                criteria = criteria.Add(Expression.Eq(propertyName, propertyValue));
                criteria = criteria.AddOrder(new global::NHibernate.Criterion.Order(propertyName, ascending));
                var resultFound = criteria.List<T>();
                var result = new ListResponse<T> {  };
                if (resultFound != null)
                    result.List = resultFound;
                return result;
            }
            catch (Exception ex)
            {
                return new ListResponse<T> {  Errors = new List<Exception> { ex } };
            }
        }

        public virtual ListResponse<T> FindAll()
        {
            try
            {
                var resultFound = Session.CreateCriteria(typeof(T)).List<T>();
                var result = new ListResponse<T> {  };
                if (resultFound != null)
                    result.List = resultFound;
                return result;
            }
            catch (Exception ex)
            {
                return new ListResponse<T> {  Errors = new List<Exception> { ex } };
            }
        }
    }
}
