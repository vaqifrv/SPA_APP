//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using App.Membership.Repositories.Abstract;
using App.Membership.Infrastructure.Messages;
using App.Membership.Domain;
using NHibernate;
using NHibernate.Criterion;
using System.Linq;

namespace App.Membership.Repositories.NHibernate
{
    public class UserRepository : RepositoryBase<User, string>, IUserRepository
    {
        public virtual ResponseBase Lock(string username)
        {
            throw new System.NotImplementedException();
        }

        public virtual ValueResponse<bool> ValidateUser(string username, string password)
        {
            try
            {
                ICriteria criteria = Session.QueryOver<User>()
                    .Where(x => x.Username == username)
                    .And(x => x.Password == password)
                    .AndNot(x => x.IsDeleted)
                    .And(x => x.IsEnabled)
                    .UnderlyingCriteria;

                int totalRecords = criteria.SetProjection(Projections.Count(Projections.Id())).UniqueResult<int>();
                return new ValueResponse<bool> {  Value = totalRecords == 1 };
            }
            catch (Exception ex)
            {
                return new ValueResponse<bool>() {  Value = false, Errors = new List<Exception> { ex } };
            }



        }



        public ValueResponse<bool> ChangePassword(string username, string oldPassword, string newPassword)
        {
            var userResult = FindBy(username);
            if (!userResult.Success)
                return new ValueResponse<bool> {  Value = false, Errors = userResult.Errors };

            if (userResult.Value == null)
                return new ValueResponse<bool> {  Value = false };

            if (userResult.Value.Password == oldPassword)
            {
                userResult.Value.Password = newPassword;
                userResult = Update(userResult.Value);
                return new ValueResponse<bool> {Errors = userResult.Errors, Value = true};
            }
            else
            {
                return new ValueResponse<bool> {  Value = false };
            }

        }



        public ListResponse<User> GetAllUsers(int pageIndex, int pageSize, out int totalRecords)
        {
            try
            {
                totalRecords = Session.QueryOver<User>()
                    .WhereNot(x => x.IsDeleted)
                    .UnderlyingCriteria
                    .SetProjection(Projections.Count(Projections.Id()))
                    .UniqueResult<int>();

                var resultData = Session.QueryOver<User>()
                    .WhereNot(x => x.IsDeleted)
                    .UnderlyingCriteria
                    .SetFirstResult(pageIndex * pageSize)
                    .SetMaxResults(pageSize)
                    .List<User>();

                var result = new ListResponse<User> {  };

                if (resultData != null)
                    result.List = resultData;

                return result;
            }
            catch (Exception ex)
            {
                totalRecords = 0;
                return new ListResponse<User> {  Errors = new List<Exception> { ex } };
            }
        }

        public override ValueResponse<User> Delete(string Id)
        {
            var userResult = FindBy(Id);
            if (!userResult.Success)
                return userResult;
            if (userResult.Value == null)
                return new ValueResponse<User>
                {
                    
                    Errors = new List<Exception> { new Exception("Not found object!") }
                };
            userResult.Value.IsDeleted = true;
            return base.Update(userResult.Value);
        }

        public override ValueResponse<User> FindBy(string Id)
        {
            try
            {
                var resultFind = Session.QueryOver<User>()
                    .WhereNot(x => x.IsDeleted)
                    .Where(x => x.Username == Id)
                    .Take(1)
                    .SingleOrDefault<User>();
                var result = new ValueResponse<User> {  };
                if (resultFind != null)
                    result.Value = resultFind;
                return result;
            }
            catch (Exception ex)
            {
                return new ValueResponse<User> {  Errors = new List<Exception> { ex } };
            }

        }



        public ResponseBase DeleteUsersForTest()
        {
            try
            {
                IList<User> users = Session.QueryOver<User>()
                    .List<User>()
                    .Where(x => x.Username.IndexOf("test_") == 0)
                    .ToList();
                foreach (User user in users)
                {
                    using (ITransaction trans = Session.BeginTransaction())
                    {
                        Session.Delete(user);
                        trans.Commit();
                    }
                }
                return new ResponseBase {  };
            }
            catch (Exception ex)
            {
                return new ResponseBase {  Errors = new List<Exception> { ex } };
            }

        }
        
        public ValueResponse<bool> IsNewDatabase()
        {
            try
            {
                var result = Session.QueryOver<User>()
                               .UnderlyingCriteria
                               .SetProjection(Projections.Count(Projections.Id()))
                               .UniqueResult<int>() == 0;
                return new ValueResponse<bool> { Value = result};
            }
            catch (Exception ex)
            {
                return new ValueResponse<bool> { Value = false, Errors = new List<Exception> {ex}};
            }
        }
    }
}
